/*
 * This file is generated by jOOQ.
 */
package com.schedlo.postlinker.dao.tables;


import com.schedlo.postlinker.dao.App;
import com.schedlo.postlinker.dao.Keys;
import com.schedlo.postlinker.dao.tables.Media.MediaPath;
import com.schedlo.postlinker.dao.tables.Post.PostPath;
import com.schedlo.postlinker.dao.tables.records.PostMediaRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PostMedia extends TableImpl<PostMediaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>app.post_media</code>
     */
    public static final PostMedia POST_MEDIA = new PostMedia();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostMediaRecord> getRecordType() {
        return PostMediaRecord.class;
    }

    /**
     * The column <code>app.post_media.id</code>.
     */
    public final TableField<PostMediaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>app.post_media.post_id</code>.
     */
    public final TableField<PostMediaRecord, Long> POST_ID = createField(DSL.name("post_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>app.post_media.media_id</code>.
     */
    public final TableField<PostMediaRecord, Long> MEDIA_ID = createField(DSL.name("media_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private PostMedia(Name alias, Table<PostMediaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PostMedia(Name alias, Table<PostMediaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>app.post_media</code> table reference
     */
    public PostMedia(String alias) {
        this(DSL.name(alias), POST_MEDIA);
    }

    /**
     * Create an aliased <code>app.post_media</code> table reference
     */
    public PostMedia(Name alias) {
        this(alias, POST_MEDIA);
    }

    /**
     * Create a <code>app.post_media</code> table reference
     */
    public PostMedia() {
        this(DSL.name("post_media"), null);
    }

    public <O extends Record> PostMedia(Table<O> path, ForeignKey<O, PostMediaRecord> childPath, InverseForeignKey<O, PostMediaRecord> parentPath) {
        super(path, childPath, parentPath, POST_MEDIA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PostMediaPath extends PostMedia implements Path<PostMediaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PostMediaPath(Table<O> path, ForeignKey<O, PostMediaRecord> childPath, InverseForeignKey<O, PostMediaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PostMediaPath(Name alias, Table<PostMediaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PostMediaPath as(String alias) {
            return new PostMediaPath(DSL.name(alias), this);
        }

        @Override
        public PostMediaPath as(Name alias) {
            return new PostMediaPath(alias, this);
        }

        @Override
        public PostMediaPath as(Table<?> alias) {
            return new PostMediaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : App.APP;
    }

    @Override
    public Identity<PostMediaRecord, Long> getIdentity() {
        return (Identity<PostMediaRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PostMediaRecord> getPrimaryKey() {
        return Keys.KEY_POST_MEDIA_PRIMARY;
    }

    @Override
    public List<ForeignKey<PostMediaRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_POST_MEDIA_MEDIA_ID, Keys.FK_POST_MEDIA_POST_ID);
    }

    private transient MediaPath _media;

    /**
     * Get the implicit join path to the <code>app.media</code> table.
     */
    public MediaPath media() {
        if (_media == null)
            _media = new MediaPath(this, Keys.FK_POST_MEDIA_MEDIA_ID, null);

        return _media;
    }

    private transient PostPath _post;

    /**
     * Get the implicit join path to the <code>app.post</code> table.
     */
    public PostPath post() {
        if (_post == null)
            _post = new PostPath(this, Keys.FK_POST_MEDIA_POST_ID, null);

        return _post;
    }

    @Override
    public PostMedia as(String alias) {
        return new PostMedia(DSL.name(alias), this);
    }

    @Override
    public PostMedia as(Name alias) {
        return new PostMedia(alias, this);
    }

    @Override
    public PostMedia as(Table<?> alias) {
        return new PostMedia(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostMedia rename(String name) {
        return new PostMedia(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostMedia rename(Name name) {
        return new PostMedia(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostMedia rename(Table<?> name) {
        return new PostMedia(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostMedia where(Condition condition) {
        return new PostMedia(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostMedia where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostMedia where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostMedia where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostMedia where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostMedia where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostMedia where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PostMedia where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostMedia whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PostMedia whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
